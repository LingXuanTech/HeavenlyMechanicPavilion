"""Backtesting models for storing replay runs and analytics."""

from __future__ import annotations

from datetime import date, datetime
from typing import Optional

from sqlmodel import Field, SQLModel


class BacktestRun(SQLModel, table=True):
    """Metadata for a historical replay/backtest run."""

    __tablename__ = "backtest_runs"

    id: Optional[int] = Field(default=None, primary_key=True)
    run_id: str = Field(
        index=True,
        max_length=64,
        description="External identifier for the run",
        sa_column_kwargs={"unique": True},
    )
    name: Optional[str] = Field(default=None, max_length=255)
    description: Optional[str] = Field(default=None, max_length=1000)

    symbols: str = Field(max_length=500, description="Comma separated list of symbols")
    start_date: date = Field(index=True)
    end_date: date = Field(index=True)

    initial_capital: float = Field(default=100_000.0)
    position_size: float = Field(default=1.0, description="Number of shares per trade")
    risk_free_rate: float = Field(
        default=0.0, description="Annualised risk free rate used for metrics"
    )

    status: str = Field(default="PENDING", max_length=32, index=True)
    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    started_at: Optional[datetime] = Field(default=None)
    completed_at: Optional[datetime] = Field(default=None)
    duration_seconds: Optional[float] = Field(default=None)

    parameters_json: Optional[str] = Field(default=None)
    config_snapshot: Optional[str] = Field(default=None)
    result_summary: Optional[str] = Field(default=None)
    error_message: Optional[str] = Field(default=None)


class BacktestMetrics(SQLModel, table=True):
    """Aggregated performance metrics for a backtest run."""

    __tablename__ = "backtest_metrics"

    id: Optional[int] = Field(default=None, primary_key=True)
    run_id: int = Field(foreign_key="backtest_runs.id", index=True)

    total_return: float = Field(default=0.0)
    annualized_return: Optional[float] = Field(default=None)
    sharpe_ratio: Optional[float] = Field(default=None)
    sortino_ratio: Optional[float] = Field(default=None)
    volatility: Optional[float] = Field(default=None)
    max_drawdown: Optional[float] = Field(default=None)
    max_drawdown_duration: Optional[int] = Field(default=None)
    win_rate: Optional[float] = Field(default=None)
    best_trade_return: Optional[float] = Field(default=None)
    worst_trade_return: Optional[float] = Field(default=None)
    trades_executed: int = Field(default=0)
    holding_period_days: int = Field(default=0)

    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
    metadata_json: Optional[str] = Field(default=None)


class BacktestEquityCurvePoint(SQLModel, table=True):
    """Equity curve points captured for each backtest date."""

    __tablename__ = "backtest_equity_curve"

    id: Optional[int] = Field(default=None, primary_key=True)
    run_id: int = Field(foreign_key="backtest_runs.id", index=True)
    timestamp: datetime = Field(index=True)

    price: float = Field(description="Instrument closing price")
    equity: float = Field(description="Total equity at the timestamp")
    cash: float = Field(description="Cash balance at the timestamp")
    position: float = Field(description="Open position size in shares")
    daily_return: float = Field(default=0.0, description="Daily return expressed as a fraction")


class BacktestArtifact(SQLModel, table=True):
    """Artifacts generated by a backtest run such as logs or summaries."""

    __tablename__ = "backtest_artifacts"

    id: Optional[int] = Field(default=None, primary_key=True)
    run_id: int = Field(foreign_key="backtest_runs.id", index=True)
    artifact_type: str = Field(max_length=50, index=True)

    content: Optional[str] = Field(
        default=None, description="Inline artifact content (typically JSON)"
    )
    uri: Optional[str] = Field(
        default=None, max_length=500, description="Pointer to persisted artifacts"
    )
    description: Optional[str] = Field(default=None, max_length=255)

    created_at: datetime = Field(default_factory=datetime.utcnow, index=True)
