"""配置迁移工具 - 从 default_config.py 迁移到环境变量配置."""

from __future__ import annotations

import os
from pathlib import Path
from typing import Any, Dict

from app.config.settings import Settings


def load_default_config() -> Dict[str, Any]:
    """从 default_config.py 加载旧配置.
    
    Returns:
        旧配置字典
    """
    try:
        from tradingagents.default_config import DEFAULT_CONFIG
        return DEFAULT_CONFIG
    except ImportError:
        return {}


def generate_env_from_default_config(default_config: Dict[str, Any]) -> Dict[str, str]:
    """从 default_config 生成环境变量映射.
    
    Args:
        default_config: 旧的配置字典
        
    Returns:
        环境变量名到值的映射
    """
    env_vars = {}
    
    # 基础配置
    if "project_dir" in default_config:
        env_vars["TRADINGAGENTS_PROJECT_DIR"] = str(default_config["project_dir"])
    
    if "results_dir" in default_config:
        env_vars["TRADINGAGENTS_RESULTS_DIR"] = str(default_config["results_dir"])
    
    if "data_dir" in default_config:
        env_vars["TRADINGAGENTS_DATA_DIR"] = str(default_config["data_dir"])
    
    if "data_cache_dir" in default_config:
        env_vars["TRADINGAGENTS_DATA_CACHE_DIR"] = str(default_config["data_cache_dir"])
    
    # LLM 配置
    if "llm_provider" in default_config:
        env_vars["TRADINGAGENTS_LLM_PROVIDER"] = str(default_config["llm_provider"])
    
    if "deep_think_llm" in default_config:
        env_vars["TRADINGAGENTS_DEEP_THINK_LLM"] = str(default_config["deep_think_llm"])
    
    if "quick_think_llm" in default_config:
        env_vars["TRADINGAGENTS_QUICK_THINK_LLM"] = str(default_config["quick_think_llm"])
    
    if "backend_url" in default_config:
        env_vars["TRADINGAGENTS_BACKEND_URL"] = str(default_config["backend_url"])
    
    # 辩论和讨论设置
    if "max_debate_rounds" in default_config:
        env_vars["TRADINGAGENTS_MAX_DEBATE_ROUNDS"] = str(default_config["max_debate_rounds"])
    
    if "max_risk_discuss_rounds" in default_config:
        env_vars["TRADINGAGENTS_MAX_RISK_DISCUSS_ROUNDS"] = str(default_config["max_risk_discuss_rounds"])
    
    if "max_recur_limit" in default_config:
        env_vars["TRADINGAGENTS_MAX_RECUR_LIMIT"] = str(default_config["max_recur_limit"])
    
    # 数据供应商配置
    data_vendors = default_config.get("data_vendors", {})
    if "core_stock_apis" in data_vendors:
        env_vars["VENDOR_CORE_STOCK_APIS"] = str(data_vendors["core_stock_apis"])
    
    if "technical_indicators" in data_vendors:
        env_vars["VENDOR_TECHNICAL_INDICATORS"] = str(data_vendors["technical_indicators"])
    
    if "fundamental_data" in data_vendors:
        env_vars["VENDOR_FUNDAMENTAL_DATA"] = str(data_vendors["fundamental_data"])
    
    if "news_data" in data_vendors:
        env_vars["VENDOR_NEWS_DATA"] = str(data_vendors["news_data"])
    
    return env_vars


def generate_env_file(env_vars: Dict[str, str], output_path: str | Path = ".env.migration") -> None:
    """生成 .env 文件.
    
    Args:
        env_vars: 环境变量映射
        output_path: 输出文件路径
    """
    output_path = Path(output_path)
    
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("# TradingAgents Configuration - Migrated from default_config.py\n")
        f.write("# Generated by migration tool\n\n")
        
        # LLM Configuration
        f.write("# ===== LLM Configuration =====\n")
        llm_keys = ["TRADINGAGENTS_LLM_PROVIDER", "TRADINGAGENTS_DEEP_THINK_LLM", 
                    "TRADINGAGENTS_QUICK_THINK_LLM", "TRADINGAGENTS_BACKEND_URL"]
        for key in llm_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        f.write("\n")
        
        # Path Configuration
        f.write("# ===== Path Configuration =====\n")
        path_keys = ["TRADINGAGENTS_PROJECT_DIR", "TRADINGAGENTS_RESULTS_DIR",
                     "TRADINGAGENTS_DATA_DIR", "TRADINGAGENTS_DATA_CACHE_DIR"]
        for key in path_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        f.write("\n")
        
        # Debate Settings
        f.write("# ===== Debate and Discussion Settings =====\n")
        debate_keys = ["TRADINGAGENTS_MAX_DEBATE_ROUNDS", "TRADINGAGENTS_MAX_RISK_DISCUSS_ROUNDS",
                       "TRADINGAGENTS_MAX_RECUR_LIMIT"]
        for key in debate_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        f.write("\n")
        
        # Vendor Configuration
        f.write("# ===== Data Vendor Configuration =====\n")
        vendor_keys = ["VENDOR_CORE_STOCK_APIS", "VENDOR_TECHNICAL_INDICATORS",
                       "VENDOR_FUNDAMENTAL_DATA", "VENDOR_NEWS_DATA"]
        for key in vendor_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        f.write("\n")
    
    print(f"✓ 配置已导出到: {output_path}")


def compare_configs(old_config: Dict[str, Any], settings: Settings) -> Dict[str, Dict[str, Any]]:
    """比较旧配置和新配置的差异.
    
    Args:
        old_config: 旧配置
        settings: 新配置
        
    Returns:
        差异报告 {"missing": {...}, "different": {...}}
    """
    report = {"missing": {}, "different": {}}
    new_config = settings.tradingagents_config
    
    # 检查缺失的键
    for key in old_config:
        if key == "data_vendors":
            old_vendors = old_config["data_vendors"]
            new_vendors = new_config.get("data_vendors", {})
            for vendor_key in old_vendors:
                if vendor_key not in new_vendors:
                    report["missing"][f"data_vendors.{vendor_key}"] = old_vendors[vendor_key]
                elif old_vendors[vendor_key] != new_vendors[vendor_key]:
                    report["different"][f"data_vendors.{vendor_key}"] = {
                        "old": old_vendors[vendor_key],
                        "new": new_vendors[vendor_key]
                    }
        elif key not in new_config:
            report["missing"][key] = old_config[key]
        elif old_config[key] != new_config[key]:
            report["different"][key] = {
                "old": old_config[key],
                "new": new_config[key]
            }
    
    return report


def validate_migration(settings: Settings) -> Dict[str, Any]:
    """验证配置迁移是否完整.
    
    Args:
        settings: Settings 实例
        
    Returns:
        验证报告
    """
    report = {
        "valid": True,
        "errors": [],
        "warnings": []
    }
    
    # 检查必需的配置
    required_fields = [
        "llm_provider",
        "deep_think_llm", 
        "quick_think_llm",
        "project_dir",
        "data_dir"
    ]
    
    for field in required_fields:
        value = getattr(settings, field, None)
        if not value:
            report["valid"] = False
            report["errors"].append(f"必需字段 '{field}' 未设置")
    
    # 检查路径是否存在
    path_fields = ["project_dir", "data_dir", "results_dir", "data_cache_dir"]
    for field in path_fields:
        path_value = getattr(settings, field, None)
        if path_value:
            path = Path(path_value)
            if not path.exists():
                report["warnings"].append(f"路径 '{field}={path_value}' 不存在,将在首次使用时创建")
    
    # 检查数据供应商配置
    valid_vendors = ["yfinance", "alpha_vantage", "local", "google", "openai"]
    vendor_fields = {
        "vendor_core_stock_apis": settings.vendor_core_stock_apis,
        "vendor_technical_indicators": settings.vendor_technical_indicators,
        "vendor_fundamental_data": settings.vendor_fundamental_data,
        "vendor_news_data": settings.vendor_news_data
    }
    
    for field, value in vendor_fields.items():
        if value not in valid_vendors:
            report["warnings"].append(
                f"数据供应商 '{field}={value}' 可能无效. "
                f"有效选项: {', '.join(valid_vendors)}"
            )
    
    return report


def print_migration_report(report: Dict[str, Any]) -> None:
    """打印迁移报告.
    
    Args:
        report: 验证报告
    """
    print("\n" + "="*60)
    print("配置迁移验证报告")
    print("="*60)
    
    if report["valid"]:
        print("✓ 配置迁移成功!")
    else:
        print("✗ 配置迁移存在问题")
    
    if report["errors"]:
        print("\n错误:")
        for error in report["errors"]:
            print(f"  ✗ {error}")
    
    if report["warnings"]:
        print("\n警告:")
        for warning in report["warnings"]:
            print(f"  ⚠ {warning}")
    
    if not report["errors"] and not report["warnings"]:
        print("\n没有发现问题")
    
    print("="*60 + "\n")


def migrate_config(output_path: str | Path = ".env.migration") -> None:
    """执行配置迁移的主函数.
    
    Args:
        output_path: 输出 .env 文件的路径
    """
    print("开始配置迁移...")
    
    # 1. 加载旧配置
    print("\n1. 加载 default_config.py...")
    old_config = load_default_config()
    if not old_config:
        print("  ⚠ 未找到 default_config.py 或配置为空")
        print("  将使用默认值生成配置文件")
    else:
        print(f"  ✓ 已加载 {len(old_config)} 个配置项")
    
    # 2. 生成环境变量
    print("\n2. 生成环境变量映射...")
    env_vars = generate_env_from_default_config(old_config)
    print(f"  ✓ 已生成 {len(env_vars)} 个环境变量")
    
    # 3. 导出到文件
    print(f"\n3. 导出到 {output_path}...")
    generate_env_file(env_vars, output_path)
    
    # 4. 加载新配置并验证
    print("\n4. 验证新配置...")
    # 临时设置环境变量以进行验证
    for key, value in env_vars.items():
        os.environ[key] = value
    
    settings = Settings()
    validation_report = validate_migration(settings)
    
    # 5. 打印报告
    print_migration_report(validation_report)
    
    # 6. 比较配置差异
    if old_config:
        print("5. 比较配置差异...")
        diff_report = compare_configs(old_config, settings)
        if diff_report["missing"] or diff_report["different"]:
            print("\n发现配置差异:")
            if diff_report["missing"]:
                print("\n  缺失的配置项:")
                for key, value in diff_report["missing"].items():
                    print(f"    - {key}: {value}")
            if diff_report["different"]:
                print("\n  不同的配置项:")
                for key, diff in diff_report["different"].items():
                    print(f"    - {key}:")
                    print(f"      旧值: {diff['old']}")
                    print(f"      新值: {diff['new']}")
        else:
            print("  ✓ 配置完全一致")
    
    print(f"\n迁移完成! 请检查 {output_path} 并将其内容添加到 .env 文件中")


if __name__ == "__main__":
    migrate_config()