services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tradingagents-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tradingagents}
      POSTGRES_USER: ${POSTGRES_USER:-tradingagents}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tradingagents}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tradingagents-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tradingagents-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tradingagents-network

  # Backend API
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: production
    container_name: tradingagents-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      
      # TradingAgents Configuration
      TRADINGAGENTS_LLM_PROVIDER: ${TRADINGAGENTS_LLM_PROVIDER:-openai}
      TRADINGAGENTS_DEEP_THINK_LLM: ${TRADINGAGENTS_DEEP_THINK_LLM:-o4-mini}
      TRADINGAGENTS_QUICK_THINK_LLM: ${TRADINGAGENTS_QUICK_THINK_LLM:-gpt-4o-mini}
      TRADINGAGENTS_RESULTS_DIR: ${TRADINGAGENTS_RESULTS_DIR:-/app/results}
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-tradingagents}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-tradingagents}
      DATABASE_ECHO: ${DATABASE_ECHO:-false}
      
      # Redis Configuration
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      
      # Streaming Configuration
      STREAMING_ENABLED: ${STREAMING_ENABLED:-true}
      AUTO_START_WORKERS: ${AUTO_START_WORKERS:-true}
      
      # Monitoring Configuration
      MONITORING_ENABLED: ${MONITORING_ENABLED:-true}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      
      # Watchdog Configuration
      WATCHDOG_ENABLED: ${WATCHDOG_ENABLED:-true}
      WATCHDOG_CHECK_INTERVAL: ${WATCHDOG_CHECK_INTERVAL:-60}
      WATCHDOG_TASK_TIMEOUT: ${WATCHDOG_TASK_TIMEOUT:-300}
      
      # Application Settings
      DEBUG: ${DEBUG:-false}
      HOST: 0.0.0.0
      PORT: 8000
    volumes:
      - backend_results:/app/results
      - backend_data:/app/data
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - tradingagents-network
    entrypoint: ["/bin/sh", "/app/scripts/entrypoint.sh"]
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  # Background Worker (Optional)
  worker:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: production
    container_name: tradingagents-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    environment:
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      
      # TradingAgents Configuration
      TRADINGAGENTS_LLM_PROVIDER: ${TRADINGAGENTS_LLM_PROVIDER:-openai}
      TRADINGAGENTS_DEEP_THINK_LLM: ${TRADINGAGENTS_DEEP_THINK_LLM:-o4-mini}
      TRADINGAGENTS_QUICK_THINK_LLM: ${TRADINGAGENTS_QUICK_THINK_LLM:-gpt-4o-mini}
      TRADINGAGENTS_RESULTS_DIR: ${TRADINGAGENTS_RESULTS_DIR:-/app/results}
      
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-tradingagents}:${POSTGRES_USER:-changeme}@postgres:5432/${POSTGRES_DB:-tradingagents}
      DATABASE_ECHO: ${DATABASE_ECHO:-false}
      
      # Redis Configuration
      REDIS_ENABLED: true
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      
      # Worker Configuration
      WORKER_MODE: ${WORKER_MODE:-data}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
      
      # Application Settings
      DEBUG: ${DEBUG:-false}
    volumes:
      - backend_results:/app/results
      - backend_data:/app/data
    networks:
      - tradingagents-network
    command: ["python", "-m", "app.workers.data_worker"]
    profiles:
      - workers

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: tradingagents-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8000}
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - tradingagents-network
    profiles:
      - frontend

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: tradingagents-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - tradingagents-network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_results:
    driver: local
  backend_data:
    driver: local

networks:
  tradingagents-network:
    driver: bridge
